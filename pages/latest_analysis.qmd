---
title: "Latest Analysis"
subtitle: "The most recent posts we have published."
format:
  html:
    page-layout: full

listing:
  - id: latest-analysis
    contents: ../content/publications/*.qmd
    type: default
    sort: "date desc"
    categories: false
    sort-ui: true
    filter-ui: true
    feed: false
    page-size: 7
    template: ../includes/analysis-card.ejs
---

::: {.analysis-container}
::: {.analysis-grid}
::: {.analysis-content}
# Latest Analysis
<p class="subtitle">The most recent posts we have published.</p>

::: {#latest-analysis}
:::
:::

::: {.analysis-sidebar}
## Categories

```{=html}
<!-- This will be populated via JavaScript with categories from the listing -->
<div class="category-list">
  <div class="category-item">
    <a href="#" class="category-link active" data-category="all">All <span id="count-all" class="count">(31)</span></a>
  </div>
</div>
```

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Get all category links from the main listing
  const categoryLinks = document.querySelectorAll('.listing-category-item a');
  const categoryList = document.querySelector('.category-list');
  
  // Create a map to count items per category
  const categories = new Map();
  categories.set('all', parseInt(document.getElementById('count-all').textContent.replace(/[()]/g, '')));
  
  // Process each category link
  categoryLinks.forEach(link => {
    const category = link.textContent.trim();
    const count = parseInt(link.querySelector('.listing-count').textContent.replace(/[()]/g, ''));
    
    if (!categories.has(category)) {
      categories.set(category, count);
      
      // Create a new category item for the sidebar
      const item = document.createElement('div');
      item.className = 'category-item';
      item.innerHTML = `<a href="#" class="category-link" data-category="${category}">${category} <span class="count">(${count})</span></a>`;
      categoryList.appendChild(item);
    }
  });
  
  // Add event listeners to sidebar category links
  document.querySelectorAll('.category-link').forEach(link => {
    link.addEventListener('click', function(e) {
      e.preventDefault();
      
      // Remove active class from all links
      document.querySelectorAll('.category-link').forEach(l => l.classList.remove('active'));
      
      // Add active class to clicked link
      this.classList.add('active');
      
      const category = this.getAttribute('data-category');
      
      // If "All" is selected, show all items
      if (category === 'all') {
        document.querySelectorAll('.listing-entry').forEach(item => {
          item.style.display = 'block';
        });
      } else {
        // Otherwise, filter items
        document.querySelectorAll('.listing-entry').forEach(item => {
          const itemCategories = item.getAttribute('data-categories').split(',');
          if (itemCategories.includes(category)) {
            item.style.display = 'block';
          } else {
            item.style.display = 'none';
          }
        });
      }
    });
  });
});
</script>
:::
:::
:::
